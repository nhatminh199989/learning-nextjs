import Head from 'next/head'
import { Inter } from 'next/font/google'
import MainLayout from '@/layouts/main'
import { useEffect, useState } from 'react';
import postServices from '@/services/axios';
import commentServices from '@/services/axiosComment';

const inter = Inter({ subsets: ['latin'] })

// export async function getStaticProps() {
//   const res = await commentServices.getComments();
//   const comments = res.data;
//   return {
//     props: {
//       comments,
//     },
//   }
// }

export default function Home({ comments }) {
  const [listPost, setListPost] = useState([]);
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [editId, setEditId] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editAuthor, setEditAuthor] = useState('');

  // useEffect(() => {
  //   async function fetchData() {
  //     const res = await postServices.getListPost();
  //     setListPost(res.data);
  //   }
  //   fetchData();
  // }, []);

  const deletePost = async (id) => {
    const res = await postServices.deletePost(id);
    const newList = await postServices.getListPost();
    setListPost(newList.data);
  }

  const addPost = async (params = {}) => {
    const res = await postServices.addPost(params);
    const newList = await postServices.getListPost();
    setListPost(newList.data);
  }

  const editPost = async (post) => {
    const res = await postServices.editPost(post.id, post);
    const newList = await postServices.getListPost();
    setListPost(newList.data);
    setEditTitle("");
    setEditAuthor("");
    setEditId("");
  }

  const showEditForm = (post) => {
    setEditId(post.id);
    setEditTitle(post.title);
    setEditAuthor(post.author);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <p className='text-xl font-bold'>List User Posts</p>
        <div className="shadow-sm overflow-hidden my-8">
          {/* Add form */}
          
          <div className='flex justify-start items-start gap-4'>
            <div className="flex gap-6 justify-start items-center mb-8">
              <p>Title</p>
              <input onChange={(e) => setTitle(e.target.value)} value={title}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                type="text" placeholder="Title"/>
            </div>
            <div className="flex gap-6 justify-start items-center mb-8">
              <p>Author</p>
              <input 
                onChange={(e) => setAuthor(e.target.value)} value={author}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                type="text" placeholder="Author"/>
            </div>
            <button 
              onClick={() => addPost({ title: title, author: author })}
              className="bg-green-600 text-white py-2 px-4 rounded">
              Add
            </button>
          </div>
    
          {/* Edit Form */}
            
          <div className='flex justify-start items-start gap-4'>
            <div className="flex gap-6 justify-start items-center mb-8">
              <p>Title</p>
              <input onChange={(e) => setEditTitle(e.target.value)} value={editTitle}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                type="text" placeholder="Title"/>
            </div>
            <div className="flex gap-6 justify-start items-center mb-8">
              <p>Author</p>
              <input 
                onChange={(e) => setEditAuthor(e.target.value)} value={editAuthor}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                type="text" placeholder="Author"/>
            </div>
            <button 
              onClick={() => editPost({ id: editId, title: editTitle, author: editAuthor })}
              className="bg-yellow-600 text-white py-2 px-4 rounded">
              Edit
            </button>
          </div>

          <table className="border-collapse table-fixed w-full text-sm">
            <thead>
              <tr>
                <th className="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left w-[10%]">ID</th>
                <th className="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Title</th>
                <th className="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Author</th>
                <th className="border-b dark:border-slate-600 font-medium p-4 pl-8 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left">Action</th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-slate-800">
              {listPost.map((post, index) => (
                <tr key={index}>
                  <td className="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400 w-[10%]">{ post.id }</td>
                  <td className="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{ post.title }</td>
                  <td className="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">{ post.author }</td>
                  <td className="border-b border-slate-100 dark:border-slate-700 p-4 pl-8 text-slate-500 dark:text-slate-400">
                    <div className='flex items-center gap-4'>
                      <button className="bg-red-600 text-white py-2 px-4 rounded"
                        onClick={() => deletePost(post.id)}>
                        Delete
                      </button>
                      <button className="bg-yellow-600 text-white py-2 px-4 rounded"
                        onClick={() => showEditForm(post)}>
                        Edit
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <p className='text-xl font-bold mt-8'>List Comments</p>
        <div>
          {(comments && comments.length) && comments.map( (comment, index) => (
            <p className="text-lg" key={index}>{comment.body}</p>
          ))}
        </div>
      </MainLayout>
    </>
  )
}
